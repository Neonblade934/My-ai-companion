<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>My AI Companion - Offline Advanced</title>
<style>
  body { font-family: Arial, sans-serif; background: #f0f2f5; margin:0; padding:0; }
  header { background: #6200ea; color: white; padding: 1rem; text-align: center; }
  main { max-width: 700px; margin: 1rem auto; background: white; padding: 1rem 2rem; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1);}
  label { display: block; margin-top: 0.5rem; }
  input, select { width: 100%; padding: 0.5rem; margin-top: 0.2rem; border: 1px solid #ccc; border-radius: 5px; }
  button { margin-top: 1rem; background: #6200ea; color: white; border:none; padding: 0.7rem 1.5rem; border-radius: 5px; cursor: pointer; }
  button:hover { background: #4500b5; }
  .chatbox { border: 1px solid #ccc; height: 300px; overflow-y: auto; background: #fff; padding: 1rem; margin-top: 1rem; border-radius: 5px; }
  .message { margin-bottom: 0.7rem; }
  .user { text-align: right; color: #6200ea; }
  .bot { text-align: left; color: #333; }
  .video-wrapper { margin: 1rem 0; text-align: center; }
  video, img { max-width: 320px; border-radius: 10px; border: 3px solid #6200ea; }
  .saved-characters { margin-top: 1rem; }
  .character-item { cursor: pointer; padding: 0.5rem; border: 1px solid #6200ea; border-radius: 5px; margin-bottom: 0.3rem; background: #e6d7ff; }
  .character-item:hover { background: #c5aaff; }
</style>
</head>
<body>
<header>
  <h1>My AI Companion - Offline Advanced</h1>
</header>
<main>
  <section>
    <h2>Create / Load Character</h2>
    <label for="charName">Name:</label>
    <input type="text" id="charName" placeholder="Enter character name" />

    <label for="charStyle">Style:</label>
    <select id="charStyle">
      <option value="anime">Anime</option>
      <option value="realistic">Realistic</option>
    </select>

    <label for="charGender">Gender:</label>
    <select id="charGender">
      <option value="male">Male</option>
      <option value="female">Female</option>
      <option value="nonbinary">Nonbinary</option>
    </select>

    <label for="charPersonality">Personality (short description):</label>
    <input type="text" id="charPersonality" placeholder="E.g. cheerful and witty" />

    <button onclick="saveCharacter()">Save Character</button>
    <div class="saved-characters" id="savedCharactersList"></div>
  </section>

  <section id="videoSection" style="display:none;">
    <h2>Video Call Simulation</h2>
    <div class="video-wrapper" id="videoWrapper">
      <img id="characterVideo" src="" alt="Character Video" />
    </div>
    <div class="chatbox" id="chatBox"></div>
    <input type="text" id="userInput" placeholder="Say something..." />
    <button onclick="sendMessage()">Send</button>
  </section>
</main>

<script>
  // Local Storage Keys
  const STORAGE_KEY = 'my_ai_companion_characters';

  // Load saved characters from localStorage
  function getSavedCharacters() {
    const data = localStorage.getItem(STORAGE_KEY);
    return data ? JSON.parse(data) : [];
  }

  // Save a new character or update existing
  function saveCharacter() {
    const name = document.getElementById('charName').value.trim();
    const style = document.getElementById('charStyle').value;
    const gender = document.getElementById('charGender').value;
    const personality = document.getElementById('charPersonality').value.trim();

    if (!name) {
      alert('Please enter a character name.');
      return;
    }

    let characters = getSavedCharacters();
    const existingIndex = characters.findIndex(c => c.name.toLowerCase() === name.toLowerCase());

    const characterData = { name, style, gender, personality };

    if (existingIndex !== -1) {
      characters[existingIndex] = characterData;
    } else {
      characters.push(characterData);
    }

    localStorage.setItem(STORAGE_KEY, JSON.stringify(characters));
    alert(`Character "${name}" saved.`);
    showSavedCharacters();
    loadCharacter(characterData);
  }

  // Show saved characters for quick load
  function showSavedCharacters() {
    const listDiv = document.getElementById('savedCharactersList');
    const characters = getSavedCharacters();
    listDiv.innerHTML = '';
    if (characters.length === 0) {
      listDiv.innerHTML = '<small>No saved characters yet.</small>';
      return;
    }
    characters.forEach(c => {
      const div = document.createElement('div');
      div.textContent = c.name + ` (${c.style}, ${c.gender})`;
      div.className = 'character-item';
      div.onclick = () => loadCharacter(c);
      listDiv.appendChild(div);
    });
  }

  // Load character to UI and show video/chat section
  function loadCharacter(character) {
    document.getElementById('charName').value = character.name;
    document.getElementById('charStyle').value = character.style;
    document.getElementById('charGender').value = character.gender;
    document.getElementById('charPersonality').value = character.personality;

    // Show video section
    document.getElementById('videoSection').style.display = 'block';

    // Set video or animated gif depending on style/gender (using placeholders)
    const videoImg = document.getElementById('characterVideo');
    // For demo: use public domain or creative commons gifs or videos
    // Here I use simple placeholders:
    if (character.style === 'anime') {
      if (character.gender === 'male') {
        videoImg.src = 'https://media.giphy.com/media/l0HlNaQ6gWfllcjDO/giphy.gif'; // anime boy waving
      } else if (character.gender === 'female') {
        videoImg.src = 'https://media.giphy.com/media/xT9IgG50Fb7Mi0prBC/giphy.gif'; // anime girl waving
      } else {
        videoImg.src = 'https://media.giphy.com/media/26n6WywJyh39n1pBu/giphy.gif'; // anime neutral
      }
    } else {
      // realistic style placeholders
      if (character.gender === 'male') {
        videoImg.src = 'https://media.giphy.com/media/3o7qDZrA3NnYHxnE7W/giphy.gif'; // real man waving
      } else if (character.gender === 'female') {
        videoImg.src = 'https://media.giphy.com/media/3o7TKMt1VVNkHV2PaE/giphy.gif'; // real woman waving
      } else {
        videoImg.src = 'https://media.giphy.com/media/3o7TKxZAfvuWQhH3GG/giphy.gif'; // real neutral
      }
    }

    chatMessages = [];
    updateChatBox();
  }

  // Chat messages stored in session
  let chatMessages = [];

  // Simulate bot replies without AI
  function generateBotReply(text) {
    const lower = text.toLowerCase();

    // Commands for animations (fake)
    if (lower.includes('wave')) return '👋 *waves at you*';
    if (lower.includes('dance')) return '💃 *starts dancing*';
    if (lower.includes('hello') || lower.includes('hi')) return 'Hello! 😊 How can I help you today?';
    if (lower.includes('smile')) return '😊 *smiles warmly*';
    if (lower.includes('jump')) return '🏃‍♂️ *jumps excitedly*';
    if (lower.includes('sit')) return '🪑 *sits down comfortably*';

    // Personality reply samples (simple)
    if (lower.includes('how are you')) return 'I’m feeling great, thanks for asking!';
    if (lower.includes('what is your name')) return 'I am your AI companion, ready to chat!';
    if (lower.includes('bye') || lower.includes('goodbye')) return 'Goodbye! Hope to chat again soon.';

    // Default random replies
    const defaultReplies = [
      'Tell me more!',
      'That sounds interesting.',
      'I’m here for you.',
      'Can you explain that?',
      'Nice to hear that!',
      'Hmm... fascinating.',
      'I like talking with you.'
    ];
    return defaultReplies[Math.floor(Math.random() * defaultReplies.length)];
  }

  // Update chat box UI
  function updateChatBox() {
    const chatBox = document.getElementById('chatBox');
    chatBox.innerHTML = '';
    chatMessages.forEach(m => {
      const div = document.createElement('div');
      div.className = 'message ' + (m.sender === 'user' ? 'user' : 'bot');
      div.textContent = m.text;
      chatBox.appendChild(div);
    });
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  // Handle send message
  function sendMessage() {
    const input = document.getElementById('userInput');
    const text = input.value.trim();
    if (!text) return;

    chatMessages.push({ sender: 'user', text });
    updateChatBox();

    // Generate bot reply after short delay to simulate thinking
    setTimeout(() => {
      const reply = generateBotReply(text);
      chatMessages.push({ sender: 'bot', text: reply });
      updateChatBox();
    }, 800);

    input.value = '';
  }

  // Initialize saved characters list on page load
  showSavedCharacters();
</script>
</body>
</html>
